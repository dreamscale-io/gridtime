task pullPostgres(type: Exec) {
    commandLine "docker pull postgres:9.5.5".split(/\s+/)
}

task removePostgres(type: Exec) {
    commandLine "docker rm -f postgres".split(/\s+/)
    ignoreExitValue true
}

task createPostgres(type: Exec) {
    commandLine 'docker create --name=postgres --publish=5432:5432 --env="POSTGRES_USER=postgres" --env="POSTGRES_PASSWORD=postgres" postgres:9.5.5'.split(/\s+/)
    mustRunAfter pullPostgres, removePostgres
}

task startPostgres(type: Exec) {
    commandLine "docker start postgres".split(/\s+/)
    mustRunAfter createPostgres
}

task waitForPostgresInitialization(dependsOn: startPostgres) << {
    Thread.sleep(5000)
}

task createApplicationDatabase(type: Exec, dependsOn: waitForPostgresInitialization) {
    commandLine 'docker', 'exec', 'postgres', 'createdb', '-U', 'postgres', "htm-flow"
    // subsequent creates will result in failure
    ignoreExitValue true
}

task createTestDatabase(type: Exec, dependsOn: waitForPostgresInitialization) {
    commandLine 'docker', 'exec', 'postgres', 'createdb', '-U', 'postgres', "htm-flow-test"
    // subsequent creates will result in failure
    ignoreExitValue true
}

task refreshPostgres(dependsOn: [removePostgres, createPostgres, startPostgres, createApplicationDatabase, createTestDatabase])