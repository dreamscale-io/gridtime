package com.dreamscale.htmflow.core.feeds.story.see;

import com.dreamscale.htmflow.core.domain.JournalEntryEntity;
import com.dreamscale.htmflow.core.feeds.common.Flowable;
import com.dreamscale.htmflow.core.feeds.executor.parts.fetch.flowable.FlowableJournalEntry;
import com.dreamscale.htmflow.core.feeds.story.StoryFrame;
import com.dreamscale.htmflow.core.feeds.story.feature.band.TimeBand;
import com.dreamscale.htmflow.core.feeds.story.feature.band.TimeBandLayerType;
import com.dreamscale.htmflow.core.feeds.story.feature.band.FeelsContext;
import com.dreamscale.htmflow.core.feeds.story.feature.context.ContextBeginningEvent;

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.List;

/**
 * Translates the flame ratings on JournalEntries to TimeBands with a FeelsContext that always fits within
 * the frame and contributes to the push/pull signals generated by all the flames combined
 */
public class JournalFeelsObserver implements FlowObserver {

    @Override
    public void see(StoryFrame currentStoryFrame, Window window) {

        List<Flowable> flowables = window.getFlowables();

        TimeBand lastFeelsBand = currentStoryFrame.getLastBand(TimeBandLayerType.FEELS);
        ContextBeginningEvent lastIntentionStart = currentStoryFrame.getCurrentContext().getIntentionContext();

        boolean isFeelsActive = isFeelsActive(lastFeelsBand, lastIntentionStart);

        if (flowables.isEmpty() && isFeelsActive) {
            addFeelsForEntireWindow(currentStoryFrame, window, lastFeelsBand);
        }

        JournalEntryEntity lastJournalEntry = null;

        for (Flowable flowable : flowables) {
            if (flowable instanceof FlowableJournalEntry) {
                JournalEntryEntity journalEntry = ((JournalEntryEntity) flowable.get());

                if (lastJournalEntry == null && isFeelsActive) {
                    Integer flameRating = ((FeelsContext)lastFeelsBand.getReference()).getFlameRating();
                    FeelsContext feels = createFeelsContext(flameRating, window.getStart(), journalEntry.getPosition());
                    currentStoryFrame.feel(window.getStart(), feels);
                }

                if (lastJournalEntry != null) {
                    Integer flameRating = lastJournalEntry.getFlameRating();
                    if (flameRating != null && flameRating != 0) {
                        FeelsContext feels = createFeelsContext(flameRating, lastJournalEntry.getPosition(), journalEntry.getPosition());
                        currentStoryFrame.feel(lastJournalEntry.getPosition(), feels);
                    }
                }

                lastJournalEntry = journalEntry;
            }
        }

        if (lastJournalEntry != null) {
            //we had at least one thing... run any feels until end of window

            Integer flameRating = lastJournalEntry.getFlameRating();
            if (flameRating != null && flameRating != 0) {
                FeelsContext feels = createFeelsContext(flameRating, lastJournalEntry.getPosition(), window.getEnd());
                currentStoryFrame.feel(lastJournalEntry.getPosition(), feels);
            }
        }

    }

    private FeelsContext createFeelsContext(Integer flameRating, LocalDateTime start, LocalDateTime end) {

        return new FeelsContext(flameRating, Duration.between(start, end));
    }

    private boolean isFeelsActive(TimeBand lastFeelsBand, ContextBeginningEvent lastIntentionStart) {
        //if last intention comes after feels end, then we've got no active feels going on
        //if feels come after the intention, then the feels are caused by a flame that we should continue
        //until the next intention changes the context

        boolean isFeelsActive = false;

        if (lastFeelsBand != null && lastIntentionStart != null && lastIntentionStart.getPosition().isAfter(lastFeelsBand.getEnd())) {
            isFeelsActive = false;
        } else if (lastFeelsBand != null ){
            isFeelsActive = true;
        }

        return isFeelsActive;
    }

    private LocalDateTime getStartOfFeels(LocalDateTime startOfWindow, TimeBand lastFeelsBand) {
        LocalDateTime startOfFeels = startOfWindow;

        if (lastFeelsBand != null && lastFeelsBand.getEnd().isAfter(startOfWindow)) {
            startOfFeels = lastFeelsBand.getEnd();
        }

        return startOfFeels;
    }

    private void addFeelsForEntireWindow(StoryFrame storyFrame, Window window, TimeBand lastFeelsBand) {
        FeelsContext lastFeelsContext = (FeelsContext)lastFeelsBand.getReference();

        FeelsContext newFeelsContext = new FeelsContext(lastFeelsContext.getFlameRating(), window.getDuration());

        storyFrame.feel(window.getStart(), newFeelsContext);
    }


}
