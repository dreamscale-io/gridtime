package com.dreamscale.htmflow.core.feeds.story.see;

import com.dreamscale.htmflow.api.circle.CircleMessageType;
import com.dreamscale.htmflow.core.domain.CircleFeedMessageEntity;
import com.dreamscale.htmflow.core.feeds.common.Flowable;
import com.dreamscale.htmflow.core.feeds.executor.parts.fetch.flowable.FlowableCircleMessageEvent;
import com.dreamscale.htmflow.core.feeds.story.StoryFrame;
import com.dreamscale.htmflow.core.feeds.story.Window;
import com.dreamscale.htmflow.core.feeds.story.feature.band.CircleMessageContext;
import com.dreamscale.htmflow.core.feeds.story.feature.sequence.RhythmLayerType;

import java.util.List;

/**
 * Translates the flame ratings on JournalEntries to TimeBands with a FeelsContext that always fits within
 * the frame and contributes to the push/pull signals generated by all the flames combined
 */
public class CircleMessageEventObserver implements FlowObserver {

    @Override
    public void see(StoryFrame currentStoryFrame, Window window) {

        List<Flowable> flowables = window.getFlowables();

        for (Flowable flowable : flowables) {
            if (flowable instanceof FlowableCircleMessageEvent) {
                CircleFeedMessageEntity circleMessage = ((CircleFeedMessageEntity) flowable.get());

                CircleMessageType circleMessageType = circleMessage.getMessageType();

                if (isScrapbookEvent(circleMessageType)) {
                    currentStoryFrame.postCircleMessage(circleMessage.getPosition(), createMessageContext(circleMessage));
                }

            }

            currentStoryFrame.finishAfterLoad();

        }

    }

    private CircleMessageContext createMessageContext(CircleFeedMessageEntity circleMessage) {
        CircleMessageContext scrapbookMessage = new CircleMessageContext();

        scrapbookMessage.setMessageFromSpiritId(circleMessage.getSpiritId());
        scrapbookMessage.setMessageFromName(circleMessage.getFullName());

        scrapbookMessage.setCircleId(circleMessage.getCircleId());
        scrapbookMessage.setCircleName(circleMessage.getCircleName());

        scrapbookMessage.setMessageId(circleMessage.getId());
        scrapbookMessage.setMessageType(circleMessage.getMessageType());
        scrapbookMessage.setMessage(circleMessage.getMessage());
        scrapbookMessage.setFileName(circleMessage.getFileName());
        scrapbookMessage.setFilePath(circleMessage.getFilePath());
        scrapbookMessage.setSnippetSource(circleMessage.getSnippetSource());
        return scrapbookMessage;
    }

    private boolean isScrapbookEvent(CircleMessageType circleMessageType) {
        return circleMessageType.equals(CircleMessageType.CHAT)
                || circleMessageType.equals(CircleMessageType.SCREENSHOT)
                || circleMessageType.equals(CircleMessageType.SNIPPET);
    }
}
